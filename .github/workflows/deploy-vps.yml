name: Deploy to VPS

on:
  push:
    branches: [main]
  workflow_dispatch: # Permite ejecutar manualmente

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            
            # Variables
            APP_DIR="/var/www/landings"
            PM2_APP="landings"
            
            echo "üöÄ Deploy autom√°tico desde GitHub"
            
            # 1. Ir al directorio
            cd $APP_DIR
            
            # 2. Descartar cambios locales y forzar actualizaci√≥n
            echo "üîÑ Descartando cambios locales y actualizando..."
            git fetch origin main
            git reset --hard origin/main
            git clean -fd
            
            # 3. Instalar dependencias si cambiaron
            if git diff HEAD@{1} --name-only | grep -q "package-lock.json"; then
              echo "üì¶ Actualizando dependencias..."
              npm install --legacy-peer-deps
            else
              # Siempre verificar que las dependencias est√©n instaladas
              echo "üì¶ Verificando dependencias..."
              npm install --legacy-peer-deps
            fi
            
            # 4. Build de producci√≥n con memoria limitada y variable VPS
            echo "üèóÔ∏è Building..."
            export NODE_OPTIONS="--max-old-space-size=768"
            export NEXT_TELEMETRY_DISABLED=1
            export NEXT_PUBLIC_IS_VPS=true
            npm run build
            
            # 5. Verificar y corregir configuraci√≥n de nginx si es necesario
            echo "üîß Verificando configuraci√≥n de nginx..."
            if grep -q "proxy_set_header Host \\\$host" /etc/nginx/sites-available/*.conf 2>/dev/null; then
              echo "‚ö†Ô∏è  Detectada configuraci√≥n antigua de nginx, actualizando..."
              
              # Backup de configuraciones
              sudo cp -r /etc/nginx/sites-available /etc/nginx/sites-available.backup.$(date +%Y%m%d_%H%M%S)
              
              # Actualizar todas las configuraciones
              for conf in /etc/nginx/sites-available/*.conf; do
                if [ -f "$conf" ]; then
                  # Cambiar Host $host por Host localhost
                  sudo sed -i 's/proxy_set_header Host \$host;/proxy_set_header Host localhost;/g' "$conf"
                  
                  # Agregar headers faltantes si no existen
                  if ! grep -q "X-Forwarded-Host" "$conf"; then
                    sudo sed -i '/proxy_set_header Host localhost;/a\        proxy_set_header X-Forwarded-Host \$host;' "$conf"
                  fi
                  
                  if ! grep -q "X-Forwarded-Proto" "$conf"; then
                    sudo sed -i '/proxy_set_header X-Forwarded-Host/a\        proxy_set_header X-Forwarded-Proto \$scheme;' "$conf"
                  fi
                  
                  if ! grep -q "X-Forwarded-For" "$conf"; then
                    sudo sed -i '/proxy_set_header X-Forwarded-Proto/a\        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;' "$conf"
                  fi
                fi
              done
              
              # Verificar sintaxis y recargar nginx
              sudo nginx -t && sudo nginx -s reload
              echo "‚úÖ Configuraci√≥n de nginx actualizada"
            else
              echo "‚úÖ Configuraci√≥n de nginx ya est√° actualizada"
            fi
            
            # 6. Reiniciar con PM2
            pm2 restart $PM2_APP --update-env
            pm2 save
            
            echo "‚úÖ Deploy completado"